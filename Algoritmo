#Criado por: Mikelly Correia
# Trabalho final da disciplina de Estruturas de Dados e Algoritmo

class No:
 Função __init__():
      valor = chave
      prox = None
      esq = None
      dir = None

#Algoritmo de Pilha Encadeada

class Pilha_Encad:
  Função  __init__(chave):
      base = None
      topo = None
      tamanho = 0
      Empilhar(chave)

  Função Empilhar(chave):
      novo = No(chave)
      novo.prox = topo
      topo = novo
      tamanho += 1

  Função Desempilhar():
      if tamanho == 0:
          print('A lista está vazia.')
      else:
          print(topo.valor)
          aux = topo
          topo = topo.prox
          tamanho -= 1
          del aux

Classe ArvoreBinaria:

#Algoritmo de Busca Binária

  Função __init__():
      raiz = None

  Função busca( pont, chave, f):
      if pont == None:
          f = 0
      else:
          if chave == pont.valor:
              f = 1
          else:
              if chave < pont.valor:
                  if pont.esq == None:
                      f = 2
                  else:
                      pont, f = self.busca(pont.esq, chave, f)
              else:
                  if pont.dir == None:
                      f = 3
                  else:
                      pont, f = self.busca(pont.dir, chave, f)
      return pont, f

#Algoritmo de Inclusão de chave

  Função inserir(chave):
    if raiz == None:
        novo = No(chave)
        novo.esq = None
        novo.dir = None
        raiz = novo
    else:
        pont = raiz
        f = None
        pont, f= self.busca(pont, chave, f)
        if f == 1:
            print("Elemento já Existe!")
        else:
            novo = No(chave)
            novo.esq = None
            novo.dir = None
            if f == 2:
                pont.esq = novo
            else:
                pont.dir = novo

#Algoritmo de Exclusão de chave

   Função excluir(chave):
      f = None
      pont, pai, f = self.busca_pai(raiz, None, chave, f)
      if pont != None:
          if pont.esq == None:
              if pont == raiz:
                  raiz = pont.dir
              else:
                  if pont == pai.esq:
                      pai.esq = pont.dir
                  else:
                      pai.dir = pont.dir
          else:
              if pont.dir == None:
                  if pont == raiz:
                      raiz = pont.esq
                  else:
                      if pont == pai.esq:
                          pai.esq = pont.esq
                      else:
                          pai.dir = pont.esq
              else:
                  pont_aux = pont.dir
                  pai_aux = pont

                  while pont_aux.esq != None:
                      pai = pont_aux
                      pont_aux = pont_aux.esq
                  if pai_aux != pont:
                      pai_aux.esq = pont_aux.dir
                      pont_aux.dir = pont.dir
                  pont_aux = pont.esq
                  if pont == raiz:
                      raiz = pont_aux
                  else:
                      if pai.esq == pont:
                          pai.esq = pont_aux
                      else:
                          pai.dir = pont_aux
          del pont
          print("Chave excluída")
      else:
          print("Chave não encontrado!")

#Algoritmo de Busca do pai

Função busca_pai(pont, pai, chave, f):
        if pont == None:
            f = 0
        else:
            if chave == pont.valor:
                f = 1
            else:
                if chave < pont.valor:
                    pai = pont
                    pont, pai, f = self.busca_pai(pont.esq, pai, chave, f)
                else:
                    pai = pont
                    pont, pai, f = self.busca_pai(pont.dir, pai, chave, f)

        return pont, pai, f

Função Percursso ():
  pont = self.raiz
  pilha = Pilha_Encad(pont)
  pilha.Empilhar(pont)
      
  while (pont != None) and (pilha.topo != None):
        pont = pilha.Desempilhar()
        print (pont.valor)
      
      if (pont.dir != None):
          pilha.Empilhar(pont.dir)
      if (pont.esq != None):
          pilha.Empilhar(pont.esq)

Função MostrarArvore(pont, nivel=0):
  if pont != None:
            mostrar_arvore(pont.dir, nivel + 1)
            print(" " * 4 * nivel + "->", pont.valor)
            mostrar_arvore(pont.esq, nivel + 1)


arv = ArvoreBinaria()
print("------------------------- Programa Árvore Binária ----------------------------------")
op = True

while op == True:
  print("*************************************************************")
  print("1°) Inserir Elemento")
  print("2°) Exclusão de Elemento")
  print("3°) Busca Elemento")
  print("4°) Exibir Árvore Binária")
  print("5°) Pecorrer Árvore Binária - Pré-Ordem")
  print("6°) Sair do programa")
  print("**************************************************************")

  op = int(input("Informe uma opção:"))
  if op == 1:
      chave = int(input("Informe o valor:"))
      arv.inserir(chave)
  elif op == 2:
      chave = int(input("Informe o valor:"))
      arv.excluir(chave)
      op = True
      
  elif op == 3:
    f = None
    chave = int(input("Informe o valor: "))
    pont, pai, f = arv.busca_pai(arv.raiz, None, chave, f)
    if pont == None:
        print("Chave não encontrada!")
    else:
        print("Chave encontrada!")
    op = True   
  elif op == 4:
      arv.mostrar_arvore(arv.raiz)
      op = True
  elif op == 5:
      arv.percurso()
  elif op == 6:
      op = False
  else:
      print("Opção Inválida!")
      op = True


